{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","lazy","CityList","Map","NotFound","HouseDetail","Login","Rent","RentAdd","Search","App","fallback","className","exact","from","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAgBMA,EAAOC,gBAAK,kBAAM,4EAClBC,EAAWD,gBAAK,kBAAM,+DACtBE,EAAMF,gBAAK,kBAAM,wDACjBG,EAAWH,gBAAK,kBAAM,kCACtBI,EAAcJ,gBAAK,kBAAM,sEACzBK,EAAQL,gBAAK,kBAAM,+DACnBM,EAAON,gBAAK,kBAAM,wDAClBO,EAAUP,gBAAK,kBAAM,sEACrBQ,EAASR,gBAAK,kBAAM,wDAkCXS,MAjCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,yEAClB,yBAAKC,UAAU,OACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,UAE5B,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWjB,IAE/B,kBAAC,IAAD,CAAOgB,KAAK,YAAYC,UAAWf,IAEnC,kBAAC,IAAD,CAAOc,KAAK,OAAOC,UAAWd,IAE9B,kBAAC,IAAD,CAAOa,KAAK,cAAcC,UAAWZ,IAErC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWX,IAEhC,kBAAC,IAAD,CAAOU,KAAK,QAAQH,OAAK,EAACI,UAAWV,IAErC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWT,IAEnC,kBAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAWR,IAEtC,kBAAC,IAAD,CAAOQ,UAAWb,SCtCVc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b73f3d5.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\"\n\n// 路由配置\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\"\n// 一级路由\n// import Home from \"./pages/Home/index.js\"\n// import CityList from \"./pages/CityList/index.js\"\n// import Map from \"./pages/Map/index.js\"\n// import NotFound from \"./pages/NotFound\"\n// import HouseDetail from \"./components/HouseDetail/index.js\"\n// import Login from \"./pages/Login/index.js\"\n// import Rent from \"./pages/Rent/index.js\"\n// import RentAdd from \"./pages/Rent/Add/index.js\"\n// import Search from \"./pages/Rent/Search/index.js\"\n\n// 懒加载\nconst Home = lazy(() => import(\"./pages/Home/index.js\"))\nconst CityList = lazy(() => import(\"./pages/CityList/index.js\"))\nconst Map = lazy(() => import(\"./pages/Map/index.js\"))\nconst NotFound = lazy(() => import(\"./pages/NotFound\"))\nconst HouseDetail = lazy(() => import(\"./components/HouseDetail/index.js\"))\nconst Login = lazy(() => import(\"./pages/Login/index.js\"))\nconst Rent = lazy(() => import(\"./pages/Rent/index.js\"))\nconst RentAdd = lazy(() => import(\"./pages/Rent/Add/index.js\"))\nconst Search = lazy(() => import(\"./pages/Rent/Search/index.js\"))\nfunction App() {\n  return (\n    <HashRouter>\n      <Suspense fallback={<center>加载中。。。</center>}>\n        <div className=\"app\">\n          <Switch>\n            {/* 路由重定项 */}\n            <Redirect exact from=\"/\" to=\"/home\"></Redirect>\n            {/* 一级路由 */}\n            <Route path=\"/home\" component={Home}></Route>\n            {/* 城市选择列表 */}\n            <Route path=\"/cityList\" component={CityList}></Route>\n            {/* 地图找房 */}\n            <Route path=\"/map\" component={Map}></Route>\n            {/* 房屋详情的路由 */}\n            <Route path=\"/detail/:id\" component={HouseDetail}></Route>\n            {/* 登录 */}\n            <Route path=\"/login\" component={Login}></Route>\n            {/* 发布的房源列表 */}\n            <Route path=\"/rent\" exact component={Rent}></Route>\n            {/* 发布房源 */}\n            <Route path=\"/rent/add\" component={RentAdd}></Route>\n            {/* 搜索房源 */}\n            <Route path=\"/rent/search\" component={Search}></Route>\n            {/* 配置404页面 */}\n            <Route component={NotFound}></Route>\n          </Switch>\n        </div>\n      </Suspense>\n    </HashRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n// 全局样式\nimport \"./index.css\"\n// 字体图标\nimport \"./assets/fonts/iconfont.css\"\n\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}